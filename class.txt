面向对象
       程序=指令+数据（算法+数据结构）
       以指令为核心（面向过程编程）
       以数据为核心（面向对象编程）
       
       数据的操作接口
       类  实例化：
             数据（成员变量，即属性）
             方法（定义类的行为和接口，操作变量引用的数据的代码）没有实例，方法不允许被调用，即绑定
             类间关系：依赖（一个类的方法另一个类的对象），聚合（类A的对象包含类B的对象），继承    
             class classname（）
             instance =classname（）
             def method（self，）类方法
          构造器：
             __init__     （双下划线会被python解释器自动调用）
                  class myname():
                      data='hello myclass'
                      def __init__(self,who):
                          self.name=who
             析构  __del__
          特殊属性：__dict__  保存当前类的每一个成员
          实例属性        
          方法可用变量：
             实例变量  self.变量名
             局部变量  
             类变量
             全局变量
          内建函数
             issubclass（ ，）是否为子类
             isinstance（ ，）是否为类的实例
             hasattr（ ，）是否有某个属性
             super（）找出父类
          运算符重载：在方法中拦截内置操作
             

       程序设计方法：
             所有东西都是对象
             消息，调用请求
             每个对象都有其存储空间，又能容纳其他对象
             每个对象都属于某一类型
             同一类的所有对象都能接受相同的信息

      编程原则：封装（隐藏方案实现细节），继承（按层分类），多态（一个接口，多个方法）

      可调用对象：函数调用操作__call__（）
             函数
                  内置函数
                  自定义函数def lambda    
             类  
             类方法

             函数：
                  __doc__,__name__,__dict__,__code__,__globals__
             方法：
                  __doc__,__name__,__class__方法所属类，__func__实现方法的函数对象，__self__调用此方法的实例
             类
                  __doc__,__name__,__bases__,__dict__,__module__定义了当前类的模块名称
             实例
                  __class__,__dict__
             对象都有特殊方法：__init__,__new__,__del__,__dir__,__ge__






















                  
















